//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from LuceneParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class LuceneParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AND=1, OR=2, NOT=3, FN_PREFIX=4, PLUS=5, MINUS=6, LPAREN=7, RPAREN=8, 
		OP_COLON=9, OP_EQUAL=10, OP_LESSTHAN=11, OP_LESSTHANEQ=12, OP_MORETHAN=13, 
		OP_MORETHANEQ=14, CARAT=15, TILDE=16, QUOTED=17, NUMBER=18, TERM=19, REGEXPTERM=20, 
		RANGEIN_START=21, RANGEEX_START=22, DEFAULT_SKIP=23, UNKNOWN=24, F_SKIP=25, 
		ATLEAST=26, AFTER=27, BEFORE=28, CONTAINED_BY=29, CONTAINING=30, EXTEND=31, 
		FN_OR=32, FUZZYTERM=33, MAXGAPS=34, MAXWIDTH=35, NON_OVERLAPPING=36, NOT_CONTAINED_BY=37, 
		NOT_CONTAINING=38, NOT_WITHIN=39, ORDERED=40, OVERLAPPING=41, PHRASE=42, 
		UNORDERED=43, UNORDERED_NO_OVERLAPS=44, WILDCARD=45, WITHIN=46, R_SKIP=47, 
		RANGE_TO=48, RANGEIN_END=49, RANGEEX_END=50, RANGE_QUOTED=51, RANGE_GOOP=52;
	public const int
		RULE_topLevelQuery = 0, RULE_query = 1, RULE_disjQuery = 2, RULE_conjQuery = 3, 
		RULE_modClause = 4, RULE_modifier = 5, RULE_clause = 6, RULE_fieldRangeExpr = 7, 
		RULE_term = 8, RULE_groupingExpr = 9, RULE_fieldName = 10, RULE_termRangeExpr = 11, 
		RULE_quotedTerm = 12, RULE_fuzzy = 13;
	public static readonly string[] ruleNames = {
		"topLevelQuery", "query", "disjQuery", "conjQuery", "modClause", "modifier", 
		"clause", "fieldRangeExpr", "term", "groupingExpr", "fieldName", "termRangeExpr", 
		"quotedTerm", "fuzzy"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'fn:'", "'+'", "'-'", "'('", "')'", "':'", "'='", 
		"'<'", "'<='", "'>'", "'>='", "'^'", "'~'", null, null, null, null, "'['", 
		"'{'", null, null, null, null, "'after'", "'before'", null, "'containing'", 
		"'extend'", "'or'", null, null, null, null, null, null, null, "'ordered'", 
		"'overlapping'", "'phrase'", "'unordered'", null, "'wildcard'", "'within'", 
		null, "'TO'", "']'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AND", "OR", "NOT", "FN_PREFIX", "PLUS", "MINUS", "LPAREN", "RPAREN", 
		"OP_COLON", "OP_EQUAL", "OP_LESSTHAN", "OP_LESSTHANEQ", "OP_MORETHAN", 
		"OP_MORETHANEQ", "CARAT", "TILDE", "QUOTED", "NUMBER", "TERM", "REGEXPTERM", 
		"RANGEIN_START", "RANGEEX_START", "DEFAULT_SKIP", "UNKNOWN", "F_SKIP", 
		"ATLEAST", "AFTER", "BEFORE", "CONTAINED_BY", "CONTAINING", "EXTEND", 
		"FN_OR", "FUZZYTERM", "MAXGAPS", "MAXWIDTH", "NON_OVERLAPPING", "NOT_CONTAINED_BY", 
		"NOT_CONTAINING", "NOT_WITHIN", "ORDERED", "OVERLAPPING", "PHRASE", "UNORDERED", 
		"UNORDERED_NO_OVERLAPS", "WILDCARD", "WITHIN", "R_SKIP", "RANGE_TO", "RANGEIN_END", 
		"RANGEEX_END", "RANGE_QUOTED", "RANGE_GOOP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LuceneParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LuceneParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LuceneParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LuceneParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TopLevelQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LuceneParser.Eof, 0); }
		public TopLevelQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterTopLevelQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitTopLevelQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelQueryContext topLevelQuery() {
		TopLevelQueryContext _localctx = new TopLevelQueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_topLevelQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			query();
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DisjQueryContext[] disjQuery() {
			return GetRuleContexts<DisjQueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjQueryContext disjQuery(int i) {
			return GetRuleContext<DisjQueryContext>(i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 31;
				disjQuery();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 8257768L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConjQueryContext[] conjQuery() {
			return GetRuleContexts<ConjQueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConjQueryContext conjQuery(int i) {
			return GetRuleContext<ConjQueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(LuceneParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(LuceneParser.OR, i);
		}
		public DisjQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterDisjQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitDisjQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisjQueryContext disjQuery() {
		DisjQueryContext _localctx = new DisjQueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_disjQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			conjQuery();
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 37;
				Match(OR);
				State = 38;
				conjQuery();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConjQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ModClauseContext[] modClause() {
			return GetRuleContexts<ModClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModClauseContext modClause(int i) {
			return GetRuleContext<ModClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(LuceneParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(LuceneParser.AND, i);
		}
		public ConjQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterConjQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitConjQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjQueryContext conjQuery() {
		ConjQueryContext _localctx = new ConjQueryContext(Context, State);
		EnterRule(_localctx, 6, RULE_conjQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			modClause();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 45;
				Match(AND);
				State = 46;
				modClause();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext clause() {
			return GetRuleContext<ClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier() {
			return GetRuleContext<ModifierContext>(0);
		}
		public ModClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterModClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitModClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModClauseContext modClause() {
		ModClauseContext _localctx = new ModClauseContext(Context, State);
		EnterRule(_localctx, 8, RULE_modClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 104L) != 0) {
				{
				State = 52;
				modifier();
				}
			}

			State = 55;
			clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LuceneParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LuceneParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LuceneParser.NOT, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 104L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldRangeExprContext fieldRangeExpr() {
			return GetRuleContext<FieldRangeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExprContext groupingExpr() {
			return GetRuleContext<GroupingExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_COLON() { return GetToken(LuceneParser.OP_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_EQUAL() { return GetToken(LuceneParser.OP_EQUAL, 0); }
		public ClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClauseContext clause() {
		ClauseContext _localctx = new ClauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_clause);
		int _la;
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				fieldRangeExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 60;
					fieldName();
					State = 61;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_COLON || _la==OP_EQUAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 67;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case QUOTED:
				case NUMBER:
				case TERM:
				case REGEXPTERM:
				case RANGEIN_START:
				case RANGEEX_START:
					{
					State = 65;
					term(0);
					}
					break;
				case LPAREN:
					{
					State = 66;
					groupingExpr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldRangeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSTHAN() { return GetToken(LuceneParser.OP_LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MORETHAN() { return GetToken(LuceneParser.OP_MORETHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_LESSTHANEQ() { return GetToken(LuceneParser.OP_LESSTHANEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_MORETHANEQ() { return GetToken(LuceneParser.OP_MORETHANEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(LuceneParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED() { return GetToken(LuceneParser.QUOTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LuceneParser.NUMBER, 0); }
		public FieldRangeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldRangeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterFieldRangeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitFieldRangeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldRangeExprContext fieldRangeExpr() {
		FieldRangeExprContext _localctx = new FieldRangeExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_fieldRangeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			fieldName();
			State = 72;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 73;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXPTERM() { return GetToken(LuceneParser.REGEXPTERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARAT() { return GetToken(LuceneParser.CARAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(LuceneParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(LuceneParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermRangeExprContext termRangeExpr() {
			return GetRuleContext<TermRangeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuotedTermContext quotedTerm() {
			return GetRuleContext<QuotedTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(LuceneParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuzzyContext fuzzy() {
			return GetRuleContext<FuzzyContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REGEXPTERM:
				{
				State = 76;
				Match(REGEXPTERM);
				State = 79;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 77;
					Match(CARAT);
					State = 78;
					Match(NUMBER);
					}
					break;
				}
				}
				break;
			case RANGEIN_START:
			case RANGEEX_START:
				{
				State = 81;
				termRangeExpr();
				State = 84;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 82;
					Match(CARAT);
					State = 83;
					Match(NUMBER);
					}
					break;
				}
				}
				break;
			case QUOTED:
				{
				State = 86;
				quotedTerm();
				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 87;
					Match(CARAT);
					State = 88;
					Match(NUMBER);
					}
					break;
				}
				}
				break;
			case NUMBER:
				{
				State = 91;
				Match(NUMBER);
				State = 94;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 92;
					Match(CARAT);
					State = 93;
					Match(NUMBER);
					}
					break;
				}
				}
				break;
			case TERM:
				{
				State = 96;
				Match(TERM);
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 97;
					Match(CARAT);
					State = 98;
					Match(NUMBER);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 103;
					if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
					State = 104;
					fuzzy();
					State = 107;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 105;
						Match(CARAT);
						State = 106;
						Match(NUMBER);
						}
						break;
					}
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class GroupingExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LuceneParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LuceneParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARAT() { return GetToken(LuceneParser.CARAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LuceneParser.NUMBER, 0); }
		public GroupingExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterGroupingExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitGroupingExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingExprContext groupingExpr() {
		GroupingExprContext _localctx = new GroupingExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_groupingExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(LPAREN);
			State = 115;
			query();
			State = 116;
			Match(RPAREN);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CARAT) {
				{
				State = 117;
				Match(CARAT);
				State = 118;
				Match(NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(LuceneParser.TERM, 0); }
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(TERM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermRangeExprContext : ParserRuleContext {
		public IToken left;
		public IToken right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RANGE_TO() { return GetTokens(LuceneParser.RANGE_TO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_TO(int i) {
			return GetToken(LuceneParser.RANGE_TO, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGEIN_START() { return GetToken(LuceneParser.RANGEIN_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGEEX_START() { return GetToken(LuceneParser.RANGEEX_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGEIN_END() { return GetToken(LuceneParser.RANGEIN_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGEEX_END() { return GetToken(LuceneParser.RANGEEX_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RANGE_GOOP() { return GetTokens(LuceneParser.RANGE_GOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_GOOP(int i) {
			return GetToken(LuceneParser.RANGE_GOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RANGE_QUOTED() { return GetTokens(LuceneParser.RANGE_QUOTED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_QUOTED(int i) {
			return GetToken(LuceneParser.RANGE_QUOTED, i);
		}
		public TermRangeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termRangeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterTermRangeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitTermRangeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermRangeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermRangeExprContext termRangeExpr() {
		TermRangeExprContext _localctx = new TermRangeExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_termRangeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGEIN_START || _la==RANGEEX_START) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 124;
			_localctx.left = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7036874417766400L) != 0) ) {
				_localctx.left = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 125;
			Match(RANGE_TO);
			State = 126;
			_localctx.right = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7036874417766400L) != 0) ) {
				_localctx.right = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 127;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGEIN_END || _la==RANGEEX_END) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTED() { return GetToken(LuceneParser.QUOTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARAT() { return GetToken(LuceneParser.CARAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LuceneParser.NUMBER, 0); }
		public QuotedTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterQuotedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitQuotedTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotedTermContext quotedTerm() {
		QuotedTermContext _localctx = new QuotedTermContext(Context, State);
		EnterRule(_localctx, 24, RULE_quotedTerm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(QUOTED);
			State = 132;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 130;
				Match(CARAT);
				State = 131;
				Match(NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuzzyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(LuceneParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(LuceneParser.NUMBER, 0); }
		public FuzzyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fuzzy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.EnterFuzzy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuceneParserListener typedListener = listener as ILuceneParserListener;
			if (typedListener != null) typedListener.ExitFuzzy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILuceneParserVisitor<TResult> typedVisitor = visitor as ILuceneParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuzzy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuzzyContext fuzzy() {
		FuzzyContext _localctx = new FuzzyContext(Context, State);
		EnterRule(_localctx, 26, RULE_fuzzy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(TILDE);
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 135;
				Match(NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,52,139,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,0,1,
		0,1,1,4,1,33,8,1,11,1,12,1,34,1,2,1,2,1,2,5,2,40,8,2,10,2,12,2,43,9,2,
		1,3,1,3,1,3,5,3,48,8,3,10,3,12,3,51,9,3,1,4,3,4,54,8,4,1,4,1,4,1,5,1,5,
		1,6,1,6,1,6,1,6,3,6,64,8,6,1,6,1,6,3,6,68,8,6,3,6,70,8,6,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,3,8,80,8,8,1,8,1,8,1,8,3,8,85,8,8,1,8,1,8,1,8,3,8,90,
		8,8,1,8,1,8,1,8,3,8,95,8,8,1,8,1,8,1,8,3,8,100,8,8,3,8,102,8,8,1,8,1,8,
		1,8,1,8,3,8,108,8,8,5,8,110,8,8,10,8,12,8,113,9,8,1,9,1,9,1,9,1,9,1,9,
		3,9,120,8,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,3,12,
		133,8,12,1,13,1,13,3,13,137,8,13,1,13,0,1,16,14,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,0,7,2,0,3,3,5,6,1,0,9,10,1,0,11,14,1,0,17,19,1,0,21,22,
		2,0,48,48,51,52,1,0,49,50,145,0,28,1,0,0,0,2,32,1,0,0,0,4,36,1,0,0,0,6,
		44,1,0,0,0,8,53,1,0,0,0,10,57,1,0,0,0,12,69,1,0,0,0,14,71,1,0,0,0,16,101,
		1,0,0,0,18,114,1,0,0,0,20,121,1,0,0,0,22,123,1,0,0,0,24,129,1,0,0,0,26,
		134,1,0,0,0,28,29,3,2,1,0,29,30,5,0,0,1,30,1,1,0,0,0,31,33,3,4,2,0,32,
		31,1,0,0,0,33,34,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,3,1,0,0,0,36,41,
		3,6,3,0,37,38,5,2,0,0,38,40,3,6,3,0,39,37,1,0,0,0,40,43,1,0,0,0,41,39,
		1,0,0,0,41,42,1,0,0,0,42,5,1,0,0,0,43,41,1,0,0,0,44,49,3,8,4,0,45,46,5,
		1,0,0,46,48,3,8,4,0,47,45,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,
		0,0,0,50,7,1,0,0,0,51,49,1,0,0,0,52,54,3,10,5,0,53,52,1,0,0,0,53,54,1,
		0,0,0,54,55,1,0,0,0,55,56,3,12,6,0,56,9,1,0,0,0,57,58,7,0,0,0,58,11,1,
		0,0,0,59,70,3,14,7,0,60,61,3,20,10,0,61,62,7,1,0,0,62,64,1,0,0,0,63,60,
		1,0,0,0,63,64,1,0,0,0,64,67,1,0,0,0,65,68,3,16,8,0,66,68,3,18,9,0,67,65,
		1,0,0,0,67,66,1,0,0,0,68,70,1,0,0,0,69,59,1,0,0,0,69,63,1,0,0,0,70,13,
		1,0,0,0,71,72,3,20,10,0,72,73,7,2,0,0,73,74,7,3,0,0,74,15,1,0,0,0,75,76,
		6,8,-1,0,76,79,5,20,0,0,77,78,5,15,0,0,78,80,5,18,0,0,79,77,1,0,0,0,79,
		80,1,0,0,0,80,102,1,0,0,0,81,84,3,22,11,0,82,83,5,15,0,0,83,85,5,18,0,
		0,84,82,1,0,0,0,84,85,1,0,0,0,85,102,1,0,0,0,86,89,3,24,12,0,87,88,5,15,
		0,0,88,90,5,18,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,102,1,0,0,0,91,94,5,
		18,0,0,92,93,5,15,0,0,93,95,5,18,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,102,
		1,0,0,0,96,99,5,19,0,0,97,98,5,15,0,0,98,100,5,18,0,0,99,97,1,0,0,0,99,
		100,1,0,0,0,100,102,1,0,0,0,101,75,1,0,0,0,101,81,1,0,0,0,101,86,1,0,0,
		0,101,91,1,0,0,0,101,96,1,0,0,0,102,111,1,0,0,0,103,104,10,6,0,0,104,107,
		3,26,13,0,105,106,5,15,0,0,106,108,5,18,0,0,107,105,1,0,0,0,107,108,1,
		0,0,0,108,110,1,0,0,0,109,103,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,
		111,112,1,0,0,0,112,17,1,0,0,0,113,111,1,0,0,0,114,115,5,7,0,0,115,116,
		3,2,1,0,116,119,5,8,0,0,117,118,5,15,0,0,118,120,5,18,0,0,119,117,1,0,
		0,0,119,120,1,0,0,0,120,19,1,0,0,0,121,122,5,19,0,0,122,21,1,0,0,0,123,
		124,7,4,0,0,124,125,7,5,0,0,125,126,5,48,0,0,126,127,7,5,0,0,127,128,7,
		6,0,0,128,23,1,0,0,0,129,132,5,17,0,0,130,131,5,15,0,0,131,133,5,18,0,
		0,132,130,1,0,0,0,132,133,1,0,0,0,133,25,1,0,0,0,134,136,5,16,0,0,135,
		137,5,18,0,0,136,135,1,0,0,0,136,137,1,0,0,0,137,27,1,0,0,0,18,34,41,49,
		53,63,67,69,79,84,89,94,99,101,107,111,119,132,136
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
